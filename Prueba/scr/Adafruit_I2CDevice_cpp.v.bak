module Adafruit_I2CDevice.cpp (
    input wire clk,
    input wire rst,
    input wire i2c_sda,
    input wire i2c_scl,
    output reg i2c_detected,
    input wire start_write,
    input wire [7:0] write_data,
    input wire start_read,
    output reg [7:0] read_data
);

// Estados de la m치quina de estados
localparam IDLE = 3'b000;
localparam ADDR_DETECT = 3'b001;
localparam WRITE = 3'b010;
localparam READ = 3'b011;

// Variables de estado y control
reg [2:0] state, next_state;
reg begun;
reg [6:0] addr;
reg [7:0] maxBufferSize;
reg [7:0] buffer[0:31];
reg [4:0] buffer_idx;
reg read_in_progress;

always @(*) begin
    next_state = state;
    case(state)
        IDLE: begin
            if (rst) begin
                next_state = IDLE;
            end else if (!begun && !i2c_sda && i2c_scl) begin
                next_state = ADDR_DETECT;
            end else if (start_write) begin
                next_state = WRITE;
            end else if (start_read) begin
                next_state = READ;
            end
        end
        ADDR_DETECT: begin
            if (i2c_sda && i2c_scl) begin
                next_state = IDLE;
                i2c_detected = 1;
            end else begin
                next_state = ADDR_DETECT;
                i2c_detected = 0;
            end
        end
        WRITE: begin
            if (buffer_idx == maxBufferSize || i2c_sda && i2c_scl) begin
                next_state = IDLE;
            end else begin
                next_state = WRITE;
            end
        end
        READ: begin
            if (buffer_idx == maxBufferSize || i2c_sda && i2c_scl) begin
                next_state = IDLE;
            end else begin
                next_state = READ;
            end
        end
        default: next_state = IDLE;
    endcase
end

always @(posedge clk) begin
    if (rst) begin
        state <= IDLE;
        begun <= 0;
        addr <= 0;
        maxBufferSize <= 0;
        buffer_idx <= 0;
        read_in_progress <= 0;
    end else begin
        state <= next_state;
        case(state)
            IDLE: begin
                begun <= 0;
                addr <= 0;
                maxBufferSize <= 0;
                buffer_idx <= 0;
                read_in_progress <= 0;
            end
            ADDR_DETECT: begin
                begun <= 1;
                addr <= 7'b1010101; // Direcci칩n de ejemplo
                maxBufferSize <= 32; // Tama침o m치ximo de buffer de ejemplo
            end
            WRITE: begin
                if (!begun) begin
                    begun <= 1;
                    buffer_idx <= 0;
                end
                if (!i2c_sda && i2c_scl) begin
                    buffer[buffer_idx] <= write_data;
                    buffer_idx <= buffer_idx + 1;
                end
            end
            READ: begin
                if (!begun) begin
                    begun <= 1;
                    buffer_idx <= 0;
                    read_in_progress <= 1;
                end
                if (!i2c_sda && i2c_scl) begin
                    read_data <= buffer[buffer_idx];
                    buffer_idx <= buffer_idx + 1;
                end
            end
        endcase
    end
end

endmodule
